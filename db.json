{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/JS中的闭包.md","hash":"669ca3a5540656035499288f41854fd0af97f21f","modified":1629279005833},{"_id":"source/_posts/JS中的原型和原型链.md","hash":"a32877b04096ced93eac8945b4a5c7c757401343","modified":1629264776291},{"_id":"source/_posts/JS抽象语法树.md","hash":"4451cb6483729be5370fe07e43f9fadac13c6425","modified":1629277824273},{"_id":"source/_posts/JS的垃圾回收机制.md","hash":"f173555b46a9f5541af74c9cb1b024bc07ab8866","modified":1629278387913},{"_id":"source/_posts/事件委托.md","hash":"b71a9c6020503922cf1ceb19597a6b0c31e81a05","modified":1629277610007},{"_id":"source/_posts/手写一个Promise.md","hash":"4a75cb0ac8928881f716863beb34161e284ee947","modified":1629261956529},{"_id":"source/.DS_Store","hash":"80b2850b016d4a1e0bb736624e9be18a833501f6","modified":1626693335846},{"_id":"source/_posts/手写一个Loader.md","hash":"330f132278304366ae9053ad44c6630997309bb4","modified":1629261941781},{"_id":"source/_posts/观察者模式和发布订阅模式.md","hash":"7cb45fecb6901a6501d7dfc74534b4e0452ddd3a","modified":1629277092933},{"_id":"source/_posts/手写一个Proxy代理.md","hash":"89b62c14947f3e0f6975b82efd5928de0dbe021b","modified":1629261953979},{"_id":"source/_posts/手写一个爬虫.md","hash":"e73c26876ad9c524676868f76d81e511198b3856","modified":1629261935789},{"_id":"source/_posts/手写防抖与节流函数.md","hash":"82b29bcc4dc50a2c991d5a1da4e62efb7d9f507a","modified":1629263324172},{"_id":"source/tags/index.md","hash":"612c9a894ea5d194bdf728a4cb7741756636abb9","modified":1626175436149},{"_id":"source/categories/index.md","hash":"8d0890c4652f084608e7d0cfea5a24c003411300","modified":1626169420823},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1626168993696},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1626168993696},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1626168993693},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1626168993693},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1626168993696},{"_id":"themes/next/.DS_Store","hash":"91a5c30683a6d9164bd91a8873aa6183df900b8f","modified":1626178811605},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1626168993697},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1626168993696},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1626168993693},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1626168993715},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1626168993697},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1626168993693},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1626168993694},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1626168993695},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1626168993695},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1626168993701},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1626168993695},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1626168993695},{"_id":"themes/next/_config.yml","hash":"7dd0d890c87956178bbe0edc8bd6cd9b1bb21d10","modified":1626179350031},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1626168993695},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1626168993696},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1626168993695},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1626168993696},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1626168993696},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1626168993698},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1626168993698},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1626168993697},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1626168993698},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1626168993698},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1626168993698},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1626168993698},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1626168993699},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1626168993699},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1626168993714},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1626168993714},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1626168993705},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1626168993715},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1626168993715},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1626168993715},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1626168993702},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1626168993715},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1626168993702},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1626168993702},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1626168993702},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1626168993702},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1626168993702},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1626168993702},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1626168993703},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1626168993703},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1626168993703},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1626168993703},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1626168993703},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1626168993703},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1626168993704},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1626168993703},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1626168993704},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1626168993704},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1626168993704},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1626168993704},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1626168993718},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1626168993704},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1626168993705},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1626168993705},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1626168993694},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1626168993694},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1626168993694},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1626168993699},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1626168993695},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1626168993699},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1626168993699},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1626168993700},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1626168993699},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1626168993701},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1626168993701},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1626168993701},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1626168993701},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1626168993706},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1626168993706},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1626168993707},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1626168993707},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1626168993708},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1626168993705},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1626168993705},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1626168993709},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1626168993709},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1626168993709},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1626168993705},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1626168993710},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1626168993710},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1626168993711},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1626168993712},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1626168993713},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1626168993713},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1626168993715},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1626168993717},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1626168993717},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1626168993717},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1626168993717},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1626168993717},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1626168993717},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1626168993717},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1626168993718},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1626168993718},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1626168993718},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1626168993718},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1626168993718},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1626168993718},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1626168993718},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1626168993719},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1626168993719},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1626168993719},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1626168993719},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1626168993720},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1626168993738},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1626168993733},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1626168993720},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626168993739},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626168993738},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626168993739},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626168993739},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626168993739},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626168993740},{"_id":"themes/next/source/images/avatar.jpeg","hash":"bf0cb6518bab7ec7c89f86f7e8fe17793649fcce","modified":1609244902094},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626168993740},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626168993740},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626168993741},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1626168993741},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626168993740},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1626168993741},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626168993740},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626168993740},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1626168993741},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1626168993742},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1626168993742},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1626168993706},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1626168993706},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1626168993741},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1626168993743},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1626168993706},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1626168993707},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1626168993707},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1626168993707},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1626168993742},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1626168993706},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1626168993706},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1626168993707},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1626168993707},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1626168993708},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1626168993707},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1626168993708},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1626168993708},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1626168993708},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1626168993708},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1626168993708},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1626168993708},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1626168993709},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1626168993709},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1626168993709},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1626168993709},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1626168993710},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1626168993709},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1626168993711},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1626168993711},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1626168993710},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1626168993710},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1626168993710},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1626168993712},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1626168993712},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1626168993712},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1626168993712},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1626168993712},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1626168993713},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1626168993713},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1626168993713},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1626168993713},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1626168993713},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1626168993714},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1626168993714},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1626168993715},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1626168993714},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1626168993716},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1626168993717},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1626168993737},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1626168993737},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1626168993738},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1626168993738},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1626168993738},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1626168993742},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1626168993742},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626168993747},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626168993747},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1626168993720},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1626168993724},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1626168993727},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1626168993727},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1626168993729},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1626168993733},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1626168993732},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1626168993737},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1626168993737},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1626168993746},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1626168993744},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1626168993725},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1626168993725},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1626168993725},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1626168993725},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1626168993725},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1626168993727},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1626168993727},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1626168993729},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1626168993729},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1626168993732},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1626168993729},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1626168993733},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1626168993733},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1626168993733},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1626168993745},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1626168993746},{"_id":"public/categories/index.html","hash":"a3d0db8650ca7ea188a90e1d8a5cdf0f06686106","modified":1629279020088},{"_id":"public/tags/index.html","hash":"3a4d942048be11cbace368feda2f4ac5c2948ef0","modified":1629279020088},{"_id":"public/2021/08/18/JS中的闭包/index.html","hash":"34bf9ba4b774ae4e1ba2fe59c8b6c311c128958e","modified":1629279020088},{"_id":"public/2021/08/18/JS的垃圾回收机制/index.html","hash":"4338093def431a7bf2f0bd6ead4001e0419f62fb","modified":1629279020088},{"_id":"public/2021/08/18/事件委托/index.html","hash":"40fb10226ec38c9c6f47554f4bfa9cf5cfc9e192","modified":1629279020088},{"_id":"public/2021/08/18/观察者模式和发布订阅模式/index.html","hash":"fb34b72a3a4aef5eac6d69afdf82b7662daeab6c","modified":1629279020088},{"_id":"public/archives/index.html","hash":"8c8cdd8bdc09b6561de5cbf72d4f281fb1c7dfb6","modified":1629279020088},{"_id":"public/archives/page/2/index.html","hash":"8757330934908c2a02bd6f6d9bdd6b9ee0a894d8","modified":1629279020088},{"_id":"public/archives/2021/index.html","hash":"dbaff8237c64f8b9dcda3d4d5f809c0ec1f86bed","modified":1629279020088},{"_id":"public/archives/2021/page/2/index.html","hash":"0495ee3e577fd46463534ec661bd32e51a58a796","modified":1629279020088},{"_id":"public/archives/2021/07/index.html","hash":"1223e536218b96a224e1daa95a8d66ceca3832f6","modified":1629279020088},{"_id":"public/archives/2021/08/index.html","hash":"ec595d7ff9233a215614a202b6a14033fdca3923","modified":1629279020088},{"_id":"public/categories/javascript/index.html","hash":"0fbd7042dfbfd12d144c1187a185c1ff90c42cca","modified":1629279020088},{"_id":"public/categories/webpack/index.html","hash":"0da90ceb295bc8724a31bccffae9200768cd9b18","modified":1629279020088},{"_id":"public/categories/express/index.html","hash":"47d73a82d40b263d7a5870a91425ecaad85336f2","modified":1629279020088},{"_id":"public/categories/设计模式/index.html","hash":"9a1ed9224b23abe7ccca12a2e6371d8dfb8a6fee","modified":1629279020088},{"_id":"public/tags/原型/index.html","hash":"7c29cd6eef52c2913b55ae4b774fa89fab663e05","modified":1629279020088},{"_id":"public/tags/原型链/index.html","hash":"96cebc4f2bda1e7fca146a1f8f7a42a8c165ca1d","modified":1629279020088},{"_id":"public/tags/闭包/index.html","hash":"7b0e14681a967f83284d63084e74f9cd7e2aa466","modified":1629279020088},{"_id":"public/tags/AST/index.html","hash":"e0e261907a082e04dcbd1f8b3d83b13ef58feb32","modified":1629279020088},{"_id":"public/tags/垃圾回收机制/index.html","hash":"2d57518cc593d937d645869d29e0d0ca3c5e75c8","modified":1629279020088},{"_id":"public/tags/事件委托/index.html","hash":"59403e323842998d4568bd9a17cc976cf15ae416","modified":1629279020088},{"_id":"public/tags/Promise/index.html","hash":"46291d07fb911690145250136dafb856ee176747","modified":1629279020088},{"_id":"public/tags/手写/index.html","hash":"bbd1cc393f07ee22108f9869c955d3df2ab0600a","modified":1629279020088},{"_id":"public/tags/Loader/index.html","hash":"6d996abfe36209b414b8daa72cfe90f9b4e815af","modified":1629279020088},{"_id":"public/tags/Proxy/index.html","hash":"b8d13a01506602262904a6f7af5e904d2ef1b3c9","modified":1629279020088},{"_id":"public/tags/跨域/index.html","hash":"2395394bd6d3b7c633cd20137ac3e7c9d937aadb","modified":1629279020088},{"_id":"public/tags/爬虫/index.html","hash":"08a0d6edecf1b715e92b989d22d26d94abcf1dce","modified":1629279020088},{"_id":"public/tags/防抖/index.html","hash":"848799e3b8377bd1a336681d482ba8916849ced1","modified":1629279020088},{"_id":"public/tags/节流/index.html","hash":"52e8b155889e1cf1e6cf0661b994e1e9ace556dd","modified":1629279020088},{"_id":"public/tags/观察者模式/index.html","hash":"474e283c0908f231dbe98753ff070fb5699c8b04","modified":1629279020088},{"_id":"public/tags/发布订阅模式/index.html","hash":"e661b3224cfeda49834d19e6351df19ccf95b363","modified":1629279020088},{"_id":"public/2021/08/18/JS抽象语法树/index.html","hash":"96a7efba4ce1996d6cda32e18b1d5889ffa56550","modified":1629279020088},{"_id":"public/2021/08/18/JS中的原型和原型链/index.html","hash":"934f76bead9902a22c9a6019a201402e8e13d608","modified":1629279020088},{"_id":"public/2021/08/18/手写防抖与节流函数/index.html","hash":"e12233bf40eaa7937526e7079a521bbda7d0da24","modified":1629279020088},{"_id":"public/2021/08/18/手写一个爬虫/index.html","hash":"f7aca42f1d493788c1a45709e3073298ac3281fc","modified":1629279020088},{"_id":"public/2021/08/17/手写一个Proxy代理/index.html","hash":"85fad55f10d0784b2f2c5bd4bf7aff05e07500bd","modified":1629279020088},{"_id":"public/2021/08/17/手写一个Loader/index.html","hash":"1d445c24f6251ae889ef18d2910ed84d3cca0225","modified":1629279020088},{"_id":"public/2021/07/20/手写一个Promise/index.html","hash":"0a1ac15f9c516171b6732922c2cddef8aae07e3c","modified":1629279020088},{"_id":"public/index.html","hash":"19a52144baad5e423d5a977a8849780d976ec037","modified":1629279020088},{"_id":"public/page/2/index.html","hash":"9b51aa27a8cc7289615f7652abb893e5a16cff8f","modified":1629279020088},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1629279020088},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629279020088},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629279020088},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1629279020088},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1629279020088},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1629279020088},{"_id":"public/images/avatar.jpeg","hash":"bf0cb6518bab7ec7c89f86f7e8fe17793649fcce","modified":1629279020088},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1629279020088},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1629279020088},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1629279020088},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1629279020088},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629279020088},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629279020088},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1629279020088},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629279020088},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629279020088},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629279020088},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1629279020088},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1629279020088},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1629279020088},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1629279020088},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1629279020088},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1629279020088},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1629279020088},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1629279020088},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1629279020088},{"_id":"public/css/main.css","hash":"5fe58c38d7860bfb608d5a25d18db3cf0687c5e0","modified":1629279020088},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1629279020088},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1629279020088},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1629279020088}],"Category":[{"name":"javascript","_id":"ckshantyh00048s7u907p95lz"},{"name":"webpack","_id":"ckshantyv000l8s7ug2y55zog"},{"name":"express","_id":"ckshantyz000t8s7uatugecey"},{"name":"设计模式","_id":"ckshantz200128s7u56tm1gmw"}],"Data":[],"Page":[{"title":"categories","date":"2021-07-13T09:43:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-07-13 17:43:24\ntype: \"categories\"\n---\n","updated":"2021-07-13T09:43:40.823Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckshanty800008s7u4qes5lw4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-07-13T09:42:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-07-13 17:42:57\ntype: \"tags\"\n---\n","updated":"2021-07-13T11:23:56.149Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckshantyf00028s7uapqxazdx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS中的原型和原型链","_content":"### 原型\n\n每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。\n\n\n\n#### 构造函数、原型、实例的关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png)\n\n#### 为什么原型没有属性指向实例？\n\n因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。\n\n\n\n### 原型链\n\n当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。\n\n\n\n#### 原型链的尽头\n\n```\nconsole.log(Object.prototype.__proto__ === null) // true\n```\n\n Object.prototype.__proto__ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。\n\n\n\n#### 原型链关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png)\n\n图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。\n\n\n\n### 几个常见小问题\n\n#### 实例的constructor属性指向构造函数吗？\n\n```\nfunction Person() {}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n```\n\n当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。\n\n```\nperson.constructor === Person.prototype.constructor\n```\n\n\n\n#### 怎么理解__proto__属性？\n\n绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。\n\n\n\n#### 真的是从原型上“继承”属性吗？\n\n继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n","source":"_posts/JS中的原型和原型链.md","raw":"---\ntitle: JS中的原型和原型链\n\ntags: [原型,原型链]\n\ncategories: javascript\n---\n### 原型\n\n每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。\n\n\n\n#### 构造函数、原型、实例的关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png)\n\n#### 为什么原型没有属性指向实例？\n\n因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。\n\n\n\n### 原型链\n\n当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。\n\n\n\n#### 原型链的尽头\n\n```\nconsole.log(Object.prototype.__proto__ === null) // true\n```\n\n Object.prototype.__proto__ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。\n\n\n\n#### 原型链关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png)\n\n图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。\n\n\n\n### 几个常见小问题\n\n#### 实例的constructor属性指向构造函数吗？\n\n```\nfunction Person() {}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n```\n\n当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。\n\n```\nperson.constructor === Person.prototype.constructor\n```\n\n\n\n#### 怎么理解__proto__属性？\n\n绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。\n\n\n\n#### 真的是从原型上“继承”属性吗？\n\n继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n","slug":"JS中的原型和原型链","published":1,"date":"2021-08-18T05:09:09.312Z","updated":"2021-08-18T05:32:56.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyd00018s7uejem52so","content":"<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。</p>\n<h4 id=\"构造函数、原型、实例的关系图\"><a href=\"#构造函数、原型、实例的关系图\" class=\"headerlink\" title=\"构造函数、原型、实例的关系图\"></a>构造函数、原型、实例的关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png\"></p>\n<h4 id=\"为什么原型没有属性指向实例？\"><a href=\"#为什么原型没有属性指向实例？\" class=\"headerlink\" title=\"为什么原型没有属性指向实例？\"></a>为什么原型没有属性指向实例？</h4><p>因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。</p>\n<h4 id=\"原型链的尽头\"><a href=\"#原型链的尽头\" class=\"headerlink\" title=\"原型链的尽头\"></a>原型链的尽头</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.prototype.__proto__ === null) // true</span><br></pre></td></tr></table></figure>\n\n<p> Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。</p>\n<h4 id=\"原型链关系图\"><a href=\"#原型链关系图\" class=\"headerlink\" title=\"原型链关系图\"></a>原型链关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\"></p>\n<p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>\n<h3 id=\"几个常见小问题\"><a href=\"#几个常见小问题\" class=\"headerlink\" title=\"几个常见小问题\"></a>几个常见小问题</h3><h4 id=\"实例的constructor属性指向构造函数吗？\"><a href=\"#实例的constructor属性指向构造函数吗？\" class=\"headerlink\" title=\"实例的constructor属性指向构造函数吗？\"></a>实例的constructor属性指向构造函数吗？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">var person = new Person();</span><br><span class=\"line\">console.log(person.constructor === Person); // true</span><br></pre></td></tr></table></figure>\n\n<p>当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.constructor === Person.prototype.constructor</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"怎么理解-proto-属性？\"><a href=\"#怎么理解-proto-属性？\" class=\"headerlink\" title=\"怎么理解__proto__属性？\"></a>怎么理解__proto__属性？</h4><p>绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>\n<h4 id=\"真的是从原型上“继承”属性吗？\"><a href=\"#真的是从原型上“继承”属性吗？\" class=\"headerlink\" title=\"真的是从原型上“继承”属性吗？\"></a>真的是从原型上“继承”属性吗？</h4><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。</p>\n<h4 id=\"构造函数、原型、实例的关系图\"><a href=\"#构造函数、原型、实例的关系图\" class=\"headerlink\" title=\"构造函数、原型、实例的关系图\"></a>构造函数、原型、实例的关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png\"></p>\n<h4 id=\"为什么原型没有属性指向实例？\"><a href=\"#为什么原型没有属性指向实例？\" class=\"headerlink\" title=\"为什么原型没有属性指向实例？\"></a>为什么原型没有属性指向实例？</h4><p>因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。</p>\n<h4 id=\"原型链的尽头\"><a href=\"#原型链的尽头\" class=\"headerlink\" title=\"原型链的尽头\"></a>原型链的尽头</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.prototype.__proto__ === null) // true</span><br></pre></td></tr></table></figure>\n\n<p> Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。</p>\n<h4 id=\"原型链关系图\"><a href=\"#原型链关系图\" class=\"headerlink\" title=\"原型链关系图\"></a>原型链关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\"></p>\n<p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>\n<h3 id=\"几个常见小问题\"><a href=\"#几个常见小问题\" class=\"headerlink\" title=\"几个常见小问题\"></a>几个常见小问题</h3><h4 id=\"实例的constructor属性指向构造函数吗？\"><a href=\"#实例的constructor属性指向构造函数吗？\" class=\"headerlink\" title=\"实例的constructor属性指向构造函数吗？\"></a>实例的constructor属性指向构造函数吗？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">var person = new Person();</span><br><span class=\"line\">console.log(person.constructor === Person); // true</span><br></pre></td></tr></table></figure>\n\n<p>当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.constructor === Person.prototype.constructor</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"怎么理解-proto-属性？\"><a href=\"#怎么理解-proto-属性？\" class=\"headerlink\" title=\"怎么理解__proto__属性？\"></a>怎么理解__proto__属性？</h4><p>绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>\n<h4 id=\"真的是从原型上“继承”属性吗？\"><a href=\"#真的是从原型上“继承”属性吗？\" class=\"headerlink\" title=\"真的是从原型上“继承”属性吗？\"></a>真的是从原型上“继承”属性吗？</h4><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n"},{"title":"JS中的闭包","_content":"\n### 定义\n\nMDN对闭包的定义：\n\n函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。\n\n\n\n换种好理解的说法：\n\n闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。\n\n\n\n具体可以从两个角度来看什么函数是闭包：\n\n1. 从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n2. 从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。\n\n\n\n### 闭包的用途\n\n1. 可以读取函数内部的变量；\n2. 让变量的值始终保持在内存中；\n\n\n\n### 为什么闭包会造成内存泄漏？\n\n早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。","source":"_posts/JS中的闭包.md","raw":"---\ntitle: JS中的闭包\n\ntags: [闭包]\n\ncategories: javascript\n---\n\n### 定义\n\nMDN对闭包的定义：\n\n函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。\n\n\n\n换种好理解的说法：\n\n闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。\n\n\n\n具体可以从两个角度来看什么函数是闭包：\n\n1. 从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n2. 从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。\n\n\n\n### 闭包的用途\n\n1. 可以读取函数内部的变量；\n2. 让变量的值始终保持在内存中；\n\n\n\n### 为什么闭包会造成内存泄漏？\n\n早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。","slug":"JS中的闭包","published":1,"date":"2021-08-18T09:28:38.034Z","updated":"2021-08-18T09:30:05.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyg00038s7u8b1fbp0e","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MDN对闭包的定义：</p>\n<p>函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。</p>\n<p>换种好理解的说法：</p>\n<p>闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。</p>\n<p>具体可以从两个角度来看什么函数是闭包：</p>\n<ol>\n<li>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。</li>\n<li>从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</li>\n</ol>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><ol>\n<li>可以读取函数内部的变量；</li>\n<li>让变量的值始终保持在内存中；</li>\n</ol>\n<h3 id=\"为什么闭包会造成内存泄漏？\"><a href=\"#为什么闭包会造成内存泄漏？\" class=\"headerlink\" title=\"为什么闭包会造成内存泄漏？\"></a>为什么闭包会造成内存泄漏？</h3><p>早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MDN对闭包的定义：</p>\n<p>函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。</p>\n<p>换种好理解的说法：</p>\n<p>闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。</p>\n<p>具体可以从两个角度来看什么函数是闭包：</p>\n<ol>\n<li>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。</li>\n<li>从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</li>\n</ol>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><ol>\n<li>可以读取函数内部的变量；</li>\n<li>让变量的值始终保持在内存中；</li>\n</ol>\n<h3 id=\"为什么闭包会造成内存泄漏？\"><a href=\"#为什么闭包会造成内存泄漏？\" class=\"headerlink\" title=\"为什么闭包会造成内存泄漏？\"></a>为什么闭包会造成内存泄漏？</h3><p>早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。</p>\n"},{"title":"JS抽象语法树","_content":"\n### 前言\n\nbabel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。\n\n\n\n### 什么是抽象语法树\n\n我们可以来看一个简单的例子：\n\n```\nvar a = 1;\nvar b = a + 1;\n```\n\n我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png)\n\n而他的json对象格式是这样的：\n\n```\n{\n    \"type\": \"Program\",\n    \"body\": [\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"a\"\n                    },\n                    \"init\": {\n                        \"type\": \"Literal\",\n                        \"value\": 1,\n                        \"raw\": \"1\"\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        },\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"b\"\n                    },\n                    \"init\": {\n                        \"type\": \"BinaryExpression\",\n                        \"operator\": \"+\",\n                        \"left\": {\n                            \"type\": \"Identifier\",\n                            \"name\": \"a\"\n                        },\n                        \"right\": {\n                            \"type\": \"Literal\",\n                            \"value\": 1,\n                            \"raw\": \"1\"\n                        }\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        }\n    ],\n    \"sourceType\": \"script\"\n}\n```\n\n### AST的三板斧\n\n- 通过esprima生成AST\n- 通过estraverse遍历和更新AST\n\n- 通过escodegen将AST重新生成源码\n\n\n\n### 作用\n\n抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。\n","source":"_posts/JS抽象语法树.md","raw":"---\ntitle: JS抽象语法树\n\ntags: [AST]\n\ncategories: javascript\n---\n\n### 前言\n\nbabel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。\n\n\n\n### 什么是抽象语法树\n\n我们可以来看一个简单的例子：\n\n```\nvar a = 1;\nvar b = a + 1;\n```\n\n我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png)\n\n而他的json对象格式是这样的：\n\n```\n{\n    \"type\": \"Program\",\n    \"body\": [\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"a\"\n                    },\n                    \"init\": {\n                        \"type\": \"Literal\",\n                        \"value\": 1,\n                        \"raw\": \"1\"\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        },\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"b\"\n                    },\n                    \"init\": {\n                        \"type\": \"BinaryExpression\",\n                        \"operator\": \"+\",\n                        \"left\": {\n                            \"type\": \"Identifier\",\n                            \"name\": \"a\"\n                        },\n                        \"right\": {\n                            \"type\": \"Literal\",\n                            \"value\": 1,\n                            \"raw\": \"1\"\n                        }\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        }\n    ],\n    \"sourceType\": \"script\"\n}\n```\n\n### AST的三板斧\n\n- 通过esprima生成AST\n- 通过estraverse遍历和更新AST\n\n- 通过escodegen将AST重新生成源码\n\n\n\n### 作用\n\n抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。\n","slug":"JS抽象语法树","published":1,"date":"2021-08-18T09:08:11.435Z","updated":"2021-08-18T09:10:24.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyj00068s7u54uq0syk","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。</p>\n<h3 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h3><p>我们可以来看一个简单的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">var b = a + 1;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png\" alt=\"img\"></p>\n<p>而他的json对象格式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;Program&quot;,</span><br><span class=\"line\">    &quot;body&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;VariableDeclaration&quot;,</span><br><span class=\"line\">            &quot;declarations&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;VariableDeclarator&quot;,</span><br><span class=\"line\">                    &quot;id&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;Identifier&quot;,</span><br><span class=\"line\">                        &quot;name&quot;: &quot;a&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &quot;init&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;Literal&quot;,</span><br><span class=\"line\">                        &quot;value&quot;: 1,</span><br><span class=\"line\">                        &quot;raw&quot;: &quot;1&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;kind&quot;: &quot;var&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;VariableDeclaration&quot;,</span><br><span class=\"line\">            &quot;declarations&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;VariableDeclarator&quot;,</span><br><span class=\"line\">                    &quot;id&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;Identifier&quot;,</span><br><span class=\"line\">                        &quot;name&quot;: &quot;b&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &quot;init&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;BinaryExpression&quot;,</span><br><span class=\"line\">                        &quot;operator&quot;: &quot;+&quot;,</span><br><span class=\"line\">                        &quot;left&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;Identifier&quot;,</span><br><span class=\"line\">                            &quot;name&quot;: &quot;a&quot;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;right&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;Literal&quot;,</span><br><span class=\"line\">                            &quot;value&quot;: 1,</span><br><span class=\"line\">                            &quot;raw&quot;: &quot;1&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;kind&quot;: &quot;var&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;sourceType&quot;: &quot;script&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AST的三板斧\"><a href=\"#AST的三板斧\" class=\"headerlink\" title=\"AST的三板斧\"></a>AST的三板斧</h3><ul>\n<li><p>通过esprima生成AST</p>\n</li>\n<li><p>通过estraverse遍历和更新AST</p>\n</li>\n<li><p>通过escodegen将AST重新生成源码</p>\n</li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。</p>\n<h3 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h3><p>我们可以来看一个简单的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">var b = a + 1;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png\" alt=\"img\"></p>\n<p>而他的json对象格式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;Program&quot;,</span><br><span class=\"line\">    &quot;body&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;VariableDeclaration&quot;,</span><br><span class=\"line\">            &quot;declarations&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;VariableDeclarator&quot;,</span><br><span class=\"line\">                    &quot;id&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;Identifier&quot;,</span><br><span class=\"line\">                        &quot;name&quot;: &quot;a&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &quot;init&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;Literal&quot;,</span><br><span class=\"line\">                        &quot;value&quot;: 1,</span><br><span class=\"line\">                        &quot;raw&quot;: &quot;1&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;kind&quot;: &quot;var&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;VariableDeclaration&quot;,</span><br><span class=\"line\">            &quot;declarations&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;VariableDeclarator&quot;,</span><br><span class=\"line\">                    &quot;id&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;Identifier&quot;,</span><br><span class=\"line\">                        &quot;name&quot;: &quot;b&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &quot;init&quot;: &#123;</span><br><span class=\"line\">                        &quot;type&quot;: &quot;BinaryExpression&quot;,</span><br><span class=\"line\">                        &quot;operator&quot;: &quot;+&quot;,</span><br><span class=\"line\">                        &quot;left&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;Identifier&quot;,</span><br><span class=\"line\">                            &quot;name&quot;: &quot;a&quot;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;right&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;Literal&quot;,</span><br><span class=\"line\">                            &quot;value&quot;: 1,</span><br><span class=\"line\">                            &quot;raw&quot;: &quot;1&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;kind&quot;: &quot;var&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;sourceType&quot;: &quot;script&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AST的三板斧\"><a href=\"#AST的三板斧\" class=\"headerlink\" title=\"AST的三板斧\"></a>AST的三板斧</h3><ul>\n<li><p>通过esprima生成AST</p>\n</li>\n<li><p>通过estraverse遍历和更新AST</p>\n</li>\n<li><p>通过escodegen将AST重新生成源码</p>\n</li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。</p>\n"},{"title":"JS的垃圾回收机制","_content":"\n> 现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。\n\n### 标记清除\n\n先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。\n\n\n\n### 引用计数\n\n这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。\n\n","source":"_posts/JS的垃圾回收机制.md","raw":"---\ntitle: JS的垃圾回收机制\n\ntags: [垃圾回收机制]\n\ncategories: javascript\n---\n\n> 现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。\n\n### 标记清除\n\n先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。\n\n\n\n### 引用计数\n\n这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。\n\n","slug":"JS的垃圾回收机制","published":1,"date":"2021-08-18T09:16:22.087Z","updated":"2021-08-18T09:19:47.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyk00078s7ughwcfc6w","content":"<blockquote>\n<p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。</p>\n</blockquote>\n<h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p>先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。</p>\n</blockquote>\n<h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p>先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。</p>\n"},{"title":"事件委托","_content":"**关键词：事件冒泡和目标元素。**\n\n**科普：**\n\n一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。\n\n事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。\n\n目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。\n\n\n**使用**：\n\n把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。\n\n\n**优点：**\n\n1.可以大量节省内存占用，减少事件注册；\n\n2.在DOM更新后无需重新绑定事件处理器。\n\n\n**缺点：**\n\n1.事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；\n\n2.不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理。","source":"_posts/事件委托.md","raw":"---\ntitle: 事件委托\n\ntags: [事件委托]\n\ncategories: javascript\n---\n**关键词：事件冒泡和目标元素。**\n\n**科普：**\n\n一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。\n\n事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。\n\n目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。\n\n\n**使用**：\n\n把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。\n\n\n**优点：**\n\n1.可以大量节省内存占用，减少事件注册；\n\n2.在DOM更新后无需重新绑定事件处理器。\n\n\n**缺点：**\n\n1.事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；\n\n2.不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理。","slug":"事件委托","published":1,"date":"2021-08-18T09:01:13.750Z","updated":"2021-08-18T09:06:50.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyl00088s7u9ctw8v1q","content":"<p><strong>关键词：事件冒泡和目标元素。</strong></p>\n<p><strong>科普：</strong></p>\n<p>一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p>\n<p>事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。</p>\n<p>目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。</p>\n<p><strong>使用</strong>：</p>\n<p>把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。</p>\n<p><strong>优点：</strong></p>\n<p>1.可以大量节省内存占用，减少事件注册；</p>\n<p>2.在DOM更新后无需重新绑定事件处理器。</p>\n<p><strong>缺点：</strong></p>\n<p>1.事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；</p>\n<p>2.不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>关键词：事件冒泡和目标元素。</strong></p>\n<p><strong>科普：</strong></p>\n<p>一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p>\n<p>事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。</p>\n<p>目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。</p>\n<p><strong>使用</strong>：</p>\n<p>把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。</p>\n<p><strong>优点：</strong></p>\n<p>1.可以大量节省内存占用，减少事件注册；</p>\n<p>2.在DOM更新后无需重新绑定事件处理器。</p>\n<p><strong>缺点：</strong></p>\n<p>1.事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；</p>\n<p>2.不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理。</p>\n"},{"title":"手写一个Promise","_content":"\n```javascript\nclass Promise {\n    constructor (execute) {\n        /**\n         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。\n         *  状态改变方式（2种）：1.pending -> fulfilled; 2.pending -> fulfilled。\n         *  注意：一旦状态改变，不可逆。\n         */\n        this.PromiseState = 'pending'\n        // Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。\n        this.PromiseResult = null\n        /**\n         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，\n         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。\n         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。\n         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，\n         * \b\b数组的每一项都是一个对象：{ onResolve: 成功回调, onReject: 失败回调 }。\n         */\n        this.callBacks = []\n\n        /**\n         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> fulfilled；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const resolve = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'fulfilled'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onResolve())}, 0)\n        }\n\n        /**\n         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> rejected；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const reject = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'rejected'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onReject())}, 0)\n        }\n\n        // 用try...catch...来处理执行函数运行抛出错误\n        try {\n            execute(resolve, reject)\n        } catch (e) {\n            reject(e)\n        }\n    }\n\n    then (onResolve, onReject) {\n        /**\n         * then方法主要做的事情有四个：\n         * 1.接收两个函数作为参数，分别是成功回调和失败回调；\n         * 2.返回一个新的Promise实例，可以链式调用；\n         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；\n         * 4.回调函数返回值不同，分三种情况：\n         *   *抛出异常，状态为失败，结果为失败返回的拒因；\n         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；\n         *   *返回结果是Promise实例，返回为这个Promise的结果。\n         */\n\n        /**\n         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。\n         */\n        onResolve = typeof onResolve === 'function' ? onResolve : res => res\n\n         /**\n         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是抛出错误原因，实现异常穿透。\n         */\n        onReject = typeof onReject === 'function' ? onReject : err => { throw err } \n        \n        return new Promise((resolve, reject) => {\n            /**\n             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值\n             */\n            const handle = (cbType) => {\n                // 使用try...catch...来捕获成功回调函数执行中的异常\n                try {\n                    // 执行成功回调，获取then方法成功回调的返回结果。\n                    const res = cbType(this.PromiseResult)\n                    if (res instanceof Promise) {\n                        res.then(resolve, reject)\n                    } else {\n                        resolve(res)\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            }\n\n            switch (this.PromiseState) {\n                // Promise实例的执行函数是同步的，状态为fulfilled。\n                case 'fulfilled':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onResolve) })\n                    break;\n                // Promise实例的执行函数是同步的，状态为rejected。\n                case 'rejected':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onReject) })\n                    break;\n                // Promise实例的执行函数是异步的，状态为pending。\n                default:\n                    // 往回调里面添加成功回调和失败回调\n                    this.callBacks.push({\n                        /**\n                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数\n                         */\n                        onResolve: () => handle(onResolve),\n                        onReject: () => handle(onReject)\n                    })\n            }\n        })\n    }\n\n    catch (onReject) {\n        // 只需要调用then方法，成功回调传空即可\n        return this.then(null, onReject)\n    }\n\n    static resolve (value) {\n        /**\n         * 返回结果为Promise实例，有两种情况：\n         * 1.参数是Promise实例，返回为这个Promise的结果；\n         * 2.参数不是Promise实例，状态为成功，结果为参数。\n         */\n        return new Promise((resolve, reject) => {\n            if (value instanceof Promise) {\n                value.then(resolve, reject)\n            } else {\n                resolve(value)\n            }\n        })\n    }\n\n    static reject (value) {\n        /**\n         * 返回结果为Promise实例，状态为失败，结果为参数\n         */\n        return new Promise((resolve, reject) => {\n            reject(value)\n        })\n    }\n\n    static all (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回结果有两种情况：\n         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；\n         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。\n         */\n         return new Promise((resolve, reject) => {\n            let count = 0\n            const values = new Array(promises.length)\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    count++\n                    values[i] = res\n                    console.log('count', count)\n                    if (count === promises.length) {\n                        resolve(values)\n                    }\n                }, err => {\n                    reject(err)\n                })\n            }\n        }) \n    }\n\n    static race (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回一个Promise实例，结果由第一个完成的Promise实例决定\n         */\n         return new Promise((resolve, reject) => {\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    resolve(res)\n                }, err => {\n                    reject(err)\n                })\n            }\n        })\n    }\n}\n\nexport default Promise\n```\n\n","source":"_posts/手写一个Promise.md","raw":"---\ntitle: 手写一个Promise\n\ntags: [Promise,手写]\n\ncategories: javascript\n---\n\n```javascript\nclass Promise {\n    constructor (execute) {\n        /**\n         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。\n         *  状态改变方式（2种）：1.pending -> fulfilled; 2.pending -> fulfilled。\n         *  注意：一旦状态改变，不可逆。\n         */\n        this.PromiseState = 'pending'\n        // Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。\n        this.PromiseResult = null\n        /**\n         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，\n         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。\n         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。\n         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，\n         * \b\b数组的每一项都是一个对象：{ onResolve: 成功回调, onReject: 失败回调 }。\n         */\n        this.callBacks = []\n\n        /**\n         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> fulfilled；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const resolve = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'fulfilled'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onResolve())}, 0)\n        }\n\n        /**\n         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> rejected；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const reject = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'rejected'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onReject())}, 0)\n        }\n\n        // 用try...catch...来处理执行函数运行抛出错误\n        try {\n            execute(resolve, reject)\n        } catch (e) {\n            reject(e)\n        }\n    }\n\n    then (onResolve, onReject) {\n        /**\n         * then方法主要做的事情有四个：\n         * 1.接收两个函数作为参数，分别是成功回调和失败回调；\n         * 2.返回一个新的Promise实例，可以链式调用；\n         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；\n         * 4.回调函数返回值不同，分三种情况：\n         *   *抛出异常，状态为失败，结果为失败返回的拒因；\n         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；\n         *   *返回结果是Promise实例，返回为这个Promise的结果。\n         */\n\n        /**\n         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。\n         */\n        onResolve = typeof onResolve === 'function' ? onResolve : res => res\n\n         /**\n         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是抛出错误原因，实现异常穿透。\n         */\n        onReject = typeof onReject === 'function' ? onReject : err => { throw err } \n        \n        return new Promise((resolve, reject) => {\n            /**\n             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值\n             */\n            const handle = (cbType) => {\n                // 使用try...catch...来捕获成功回调函数执行中的异常\n                try {\n                    // 执行成功回调，获取then方法成功回调的返回结果。\n                    const res = cbType(this.PromiseResult)\n                    if (res instanceof Promise) {\n                        res.then(resolve, reject)\n                    } else {\n                        resolve(res)\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            }\n\n            switch (this.PromiseState) {\n                // Promise实例的执行函数是同步的，状态为fulfilled。\n                case 'fulfilled':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onResolve) })\n                    break;\n                // Promise实例的执行函数是同步的，状态为rejected。\n                case 'rejected':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onReject) })\n                    break;\n                // Promise实例的执行函数是异步的，状态为pending。\n                default:\n                    // 往回调里面添加成功回调和失败回调\n                    this.callBacks.push({\n                        /**\n                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数\n                         */\n                        onResolve: () => handle(onResolve),\n                        onReject: () => handle(onReject)\n                    })\n            }\n        })\n    }\n\n    catch (onReject) {\n        // 只需要调用then方法，成功回调传空即可\n        return this.then(null, onReject)\n    }\n\n    static resolve (value) {\n        /**\n         * 返回结果为Promise实例，有两种情况：\n         * 1.参数是Promise实例，返回为这个Promise的结果；\n         * 2.参数不是Promise实例，状态为成功，结果为参数。\n         */\n        return new Promise((resolve, reject) => {\n            if (value instanceof Promise) {\n                value.then(resolve, reject)\n            } else {\n                resolve(value)\n            }\n        })\n    }\n\n    static reject (value) {\n        /**\n         * 返回结果为Promise实例，状态为失败，结果为参数\n         */\n        return new Promise((resolve, reject) => {\n            reject(value)\n        })\n    }\n\n    static all (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回结果有两种情况：\n         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；\n         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。\n         */\n         return new Promise((resolve, reject) => {\n            let count = 0\n            const values = new Array(promises.length)\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    count++\n                    values[i] = res\n                    console.log('count', count)\n                    if (count === promises.length) {\n                        resolve(values)\n                    }\n                }, err => {\n                    reject(err)\n                })\n            }\n        }) \n    }\n\n    static race (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回一个Promise实例，结果由第一个完成的Promise实例决定\n         */\n         return new Promise((resolve, reject) => {\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    resolve(res)\n                }, err => {\n                    reject(err)\n                })\n            }\n        })\n    }\n}\n\nexport default Promise\n```\n\n","slug":"手写一个Promise","published":1,"date":"2021-07-20T08:22:17.769Z","updated":"2021-08-18T04:45:56.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyo000b8s7uhh50bjb5","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span> (<span class=\"params\">execute</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。</span></span><br><span class=\"line\"><span class=\"comment\">         *  状态改变方式（2种）：1.pending -&gt; fulfilled; 2.pending -&gt; fulfilled。</span></span><br><span class=\"line\"><span class=\"comment\">         *  注意：一旦状态改变，不可逆。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.PromiseState = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.PromiseResult = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，</span></span><br><span class=\"line\"><span class=\"comment\">         * \b\b数组的每一项都是一个对象：&#123; onResolve: 成功回调, onReject: 失败回调 &#125;。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callBacks = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; fulfilled；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.PromiseState !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseState = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseResult = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"built_in\">this</span>.callBacks.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.onResolve())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; rejected；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.PromiseState !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseState = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseResult = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"built_in\">this</span>.callBacks.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.onReject())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用try...catch...来处理执行函数运行抛出错误</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            execute(resolve, reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    then (onResolve, onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法主要做的事情有四个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.接收两个函数作为参数，分别是成功回调和失败回调；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.返回一个新的Promise实例，可以链式调用；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.回调函数返回值不同，分三种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         *   *抛出异常，状态为失败，结果为失败返回的拒因；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果是Promise实例，返回为这个Promise的结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onResolve = <span class=\"keyword\">typeof</span> onResolve === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是抛出错误原因，实现异常穿透。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onReject = <span class=\"keyword\">typeof</span> onReject === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> handle = <span class=\"function\">(<span class=\"params\">cbType</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 使用try...catch...来捕获成功回调函数执行中的异常</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行成功回调，获取then方法成功回调的返回结果。</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> res = cbType(<span class=\"built_in\">this</span>.PromiseResult)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        res.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(res)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.PromiseState) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为fulfilled。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;fulfilled&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; handle(onResolve) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为rejected。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;rejected&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; handle(onReject) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是异步的，状态为pending。</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 往回调里面添加成功回调和失败回调</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.callBacks.push(&#123;</span><br><span class=\"line\">                        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"attr\">onResolve</span>: <span class=\"function\">() =&gt;</span> handle(onResolve),</span><br><span class=\"line\">                        <span class=\"attr\">onReject</span>: <span class=\"function\">() =&gt;</span> handle(onReject)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只需要调用then方法，成功回调传空即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">null</span>, onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数是Promise实例，返回为这个Promise的结果；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数不是Promise实例，状态为成功，结果为参数。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                value.then(resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，状态为失败，结果为参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            reject(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> all (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promises.length)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    count++</span><br><span class=\"line\">                    values[i] = res</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;count&#x27;</span>, count)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (count === promises.length) &#123;</span><br><span class=\"line\">                        resolve(values)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    reject(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> race (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回一个Promise实例，结果由第一个完成的Promise实例决定</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    resolve(res)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    reject(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"built_in\">Promise</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span> (<span class=\"params\">execute</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。</span></span><br><span class=\"line\"><span class=\"comment\">         *  状态改变方式（2种）：1.pending -&gt; fulfilled; 2.pending -&gt; fulfilled。</span></span><br><span class=\"line\"><span class=\"comment\">         *  注意：一旦状态改变，不可逆。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.PromiseState = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.PromiseResult = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，</span></span><br><span class=\"line\"><span class=\"comment\">         * \b\b数组的每一项都是一个对象：&#123; onResolve: 成功回调, onReject: 失败回调 &#125;。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.callBacks = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; fulfilled；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.PromiseState !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseState = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseResult = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"built_in\">this</span>.callBacks.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.onResolve())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; rejected；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.PromiseState !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseState = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.PromiseResult = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"built_in\">this</span>.callBacks.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.onReject())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用try...catch...来处理执行函数运行抛出错误</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            execute(resolve, reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    then (onResolve, onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法主要做的事情有四个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.接收两个函数作为参数，分别是成功回调和失败回调；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.返回一个新的Promise实例，可以链式调用；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.回调函数返回值不同，分三种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         *   *抛出异常，状态为失败，结果为失败返回的拒因；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果是Promise实例，返回为这个Promise的结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onResolve = <span class=\"keyword\">typeof</span> onResolve === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是抛出错误原因，实现异常穿透。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onReject = <span class=\"keyword\">typeof</span> onReject === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> handle = <span class=\"function\">(<span class=\"params\">cbType</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 使用try...catch...来捕获成功回调函数执行中的异常</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行成功回调，获取then方法成功回调的返回结果。</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> res = cbType(<span class=\"built_in\">this</span>.PromiseResult)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                        res.then(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(res)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    reject(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.PromiseState) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为fulfilled。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;fulfilled&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; handle(onResolve) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为rejected。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;rejected&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; handle(onReject) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是异步的，状态为pending。</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 往回调里面添加成功回调和失败回调</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.callBacks.push(&#123;</span><br><span class=\"line\">                        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"attr\">onResolve</span>: <span class=\"function\">() =&gt;</span> handle(onResolve),</span><br><span class=\"line\">                        <span class=\"attr\">onReject</span>: <span class=\"function\">() =&gt;</span> handle(onReject)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只需要调用then方法，成功回调传空即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">null</span>, onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数是Promise实例，返回为这个Promise的结果；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数不是Promise实例，状态为成功，结果为参数。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                value.then(resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，状态为失败，结果为参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            reject(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> all (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promises.length)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    count++</span><br><span class=\"line\">                    values[i] = res</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;count&#x27;</span>, count)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (count === promises.length) &#123;</span><br><span class=\"line\">                        resolve(values)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    reject(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> race (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回一个Promise实例，结果由第一个完成的Promise实例决定</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    resolve(res)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    reject(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"built_in\">Promise</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写一个Loader","_content":"\n1.主文件 babelParse.js\n\n```javascript\nconst { getOptions } = require('loader-utils')\nconst { validate } = require('schema-utils')\nconst { transform} = require('@babel/core')\nconst { promisify } = require('util')\n\n// 将回调函数转换为基于promise的函数\nconst transformAsync = promisify(transform)\n// 校验配置\nconst babelSchema = require('./schemas/babelSchema.js')\n\n// loader本质上是一个函数\nmodule.exports = function (source) {\n    // 获取loader的配置\n    const options = getOptions(this)\n    // 校验配置：成功时往下运行，失败时停止运行报出错误\n    validate(babelSchema, options, {\n        name: 'babelLoader'\n    })\n    // 异步返回结果\n    const callBack = this.async()\n    // 调用transform方法进行转码并返回\n    transformAsync(source, options)\n        .then(({ code }) => callBack(null, code))\n        .catch(err => {callBack(err)})\n}\n```\n\n2.校验文件 babelSchema.js\n\n```javascript\nmodule.exports = {\n    type: 'object',\n    properties: {\n        presets: {\n            type: 'array'\n        }\n    },\n    // 是否可以有未定义的附加属性\n    addtionalProperty: true\n}\n```\n\n3.webpack配置文件 webpack.config.js\n\n```javascript\n\t...\n\tmodule: {\n    rules: [ \n      { \n        test: /\\.js$/, \n        use: { \n          loader: 'babelParse.js', \n          // 配置参数\n          options: { \n            presets: ['@babel/preset-env'] \n          } \n        }\n      }\n    ]\n  },\n  resolveLoader: {\n    // 寻找loader所在位置\n    modules: ['node_modules', path.resolve(__dirname, 'loaders/')]\n  },\n  ...\n```\n\n","source":"_posts/手写一个Loader.md","raw":"---\ntitle: 手写一个Loader\n\ntags: [Loader,手写]\n\ncategories: webpack\n---\n\n1.主文件 babelParse.js\n\n```javascript\nconst { getOptions } = require('loader-utils')\nconst { validate } = require('schema-utils')\nconst { transform} = require('@babel/core')\nconst { promisify } = require('util')\n\n// 将回调函数转换为基于promise的函数\nconst transformAsync = promisify(transform)\n// 校验配置\nconst babelSchema = require('./schemas/babelSchema.js')\n\n// loader本质上是一个函数\nmodule.exports = function (source) {\n    // 获取loader的配置\n    const options = getOptions(this)\n    // 校验配置：成功时往下运行，失败时停止运行报出错误\n    validate(babelSchema, options, {\n        name: 'babelLoader'\n    })\n    // 异步返回结果\n    const callBack = this.async()\n    // 调用transform方法进行转码并返回\n    transformAsync(source, options)\n        .then(({ code }) => callBack(null, code))\n        .catch(err => {callBack(err)})\n}\n```\n\n2.校验文件 babelSchema.js\n\n```javascript\nmodule.exports = {\n    type: 'object',\n    properties: {\n        presets: {\n            type: 'array'\n        }\n    },\n    // 是否可以有未定义的附加属性\n    addtionalProperty: true\n}\n```\n\n3.webpack配置文件 webpack.config.js\n\n```javascript\n\t...\n\tmodule: {\n    rules: [ \n      { \n        test: /\\.js$/, \n        use: { \n          loader: 'babelParse.js', \n          // 配置参数\n          options: { \n            presets: ['@babel/preset-env'] \n          } \n        }\n      }\n    ]\n  },\n  resolveLoader: {\n    // 寻找loader所在位置\n    modules: ['node_modules', path.resolve(__dirname, 'loaders/')]\n  },\n  ...\n```\n\n","slug":"手写一个Loader","published":1,"date":"2021-08-17T07:59:17.820Z","updated":"2021-08-18T04:45:41.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyq000c8s7ud0rmbdt9","content":"<p>1.主文件 babelParse.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; getOptions &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; validate &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;schema-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; transform&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; promisify &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将回调函数转换为基于promise的函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformAsync = promisify(transform)</span><br><span class=\"line\"><span class=\"comment\">// 校验配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> babelSchema = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./schemas/babelSchema.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// loader本质上是一个函数</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取loader的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = getOptions(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 校验配置：成功时往下运行，失败时停止运行报出错误</span></span><br><span class=\"line\">    validate(babelSchema, options, &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;babelLoader&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 异步返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> callBack = <span class=\"built_in\">this</span>.async()</span><br><span class=\"line\">    <span class=\"comment\">// 调用transform方法进行转码并返回</span></span><br><span class=\"line\">    transformAsync(source, options)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">&#123; code &#125;</span>) =&gt;</span> callBack(<span class=\"literal\">null</span>, code))</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;callBack(err)&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.校验文件 babelSchema.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;array&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否可以有未定义的附加属性</span></span><br><span class=\"line\">    <span class=\"attr\">addtionalProperty</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.webpack配置文件 webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [ </span><br><span class=\"line\">     &#123; </span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, </span><br><span class=\"line\">       use: &#123; </span><br><span class=\"line\">         <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babelParse.js&#x27;</span>, </span><br><span class=\"line\">         <span class=\"comment\">// 配置参数</span></span><br><span class=\"line\">         <span class=\"attr\">options</span>: &#123; </span><br><span class=\"line\">           <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>] </span><br><span class=\"line\">         &#125; </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">resolveLoader</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 寻找loader所在位置</span></span><br><span class=\"line\">   <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>, path.resolve(__dirname, <span class=\"string\">&#x27;loaders/&#x27;</span>)]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.主文件 babelParse.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; getOptions &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; validate &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;schema-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; transform&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; promisify &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将回调函数转换为基于promise的函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformAsync = promisify(transform)</span><br><span class=\"line\"><span class=\"comment\">// 校验配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> babelSchema = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./schemas/babelSchema.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// loader本质上是一个函数</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取loader的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = getOptions(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 校验配置：成功时往下运行，失败时停止运行报出错误</span></span><br><span class=\"line\">    validate(babelSchema, options, &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;babelLoader&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 异步返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> callBack = <span class=\"built_in\">this</span>.async()</span><br><span class=\"line\">    <span class=\"comment\">// 调用transform方法进行转码并返回</span></span><br><span class=\"line\">    transformAsync(source, options)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">&#123; code &#125;</span>) =&gt;</span> callBack(<span class=\"literal\">null</span>, code))</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;callBack(err)&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.校验文件 babelSchema.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;array&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否可以有未定义的附加属性</span></span><br><span class=\"line\">    <span class=\"attr\">addtionalProperty</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.webpack配置文件 webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [ </span><br><span class=\"line\">     &#123; </span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, </span><br><span class=\"line\">       use: &#123; </span><br><span class=\"line\">         <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babelParse.js&#x27;</span>, </span><br><span class=\"line\">         <span class=\"comment\">// 配置参数</span></span><br><span class=\"line\">         <span class=\"attr\">options</span>: &#123; </span><br><span class=\"line\">           <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>] </span><br><span class=\"line\">         &#125; </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">resolveLoader</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 寻找loader所在位置</span></span><br><span class=\"line\">   <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>, path.resolve(__dirname, <span class=\"string\">&#x27;loaders/&#x27;</span>)]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写一个Proxy代理","_content":"\n```javascript\nconst express = require('express')\nconst path = require('path')\nconst proxy = require('http-proxy-middleware')\n\nconst app = express()\n\n// 解决跨域：开发环境前端服务通过proxy代理转发请求。\n// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。\napp.use('*', proxy({ target: 'http://xx.xx.xx.xx:xxxx', changeOrigin: true }));\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n  \n    var bind = typeof port === 'string'\n      ? 'Pipe ' + port\n      : 'Port ' + port;\n  \n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n      case 'EACCES':\n        console.error(bind + ' requires elevated privileges');\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(bind + ' is already in use');\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n}\n\nfunction onListening() {\n    var addr = app.address();\n    var bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n    console.log('Listening on ' + bind);\n}\n\napp.on('error', onError);\napp.on('listening', onListening);\n// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发\napp.listen(8080)\n```","source":"_posts/手写一个Proxy代理.md","raw":"---\ntitle: 手写一个Proxy代理\n\ntags: [Proxy,跨域,手写]\n\ncategories: express\n---\n\n```javascript\nconst express = require('express')\nconst path = require('path')\nconst proxy = require('http-proxy-middleware')\n\nconst app = express()\n\n// 解决跨域：开发环境前端服务通过proxy代理转发请求。\n// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。\napp.use('*', proxy({ target: 'http://xx.xx.xx.xx:xxxx', changeOrigin: true }));\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n  \n    var bind = typeof port === 'string'\n      ? 'Pipe ' + port\n      : 'Port ' + port;\n  \n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n      case 'EACCES':\n        console.error(bind + ' requires elevated privileges');\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(bind + ' is already in use');\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n}\n\nfunction onListening() {\n    var addr = app.address();\n    var bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n    console.log('Listening on ' + bind);\n}\n\napp.on('error', onError);\napp.on('listening', onListening);\n// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发\napp.listen(8080)\n```","slug":"手写一个Proxy代理","published":1,"date":"2021-08-17T08:48:18.009Z","updated":"2021-08-18T04:45:53.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantys000g8s7uex05euqf","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域：开发环境前端服务通过proxy代理转发请求。</span></span><br><span class=\"line\"><span class=\"comment\">// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。</span></span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;*&#x27;</span>, proxy(&#123; <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://xx.xx.xx.xx:xxxx&#x27;</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onError</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.syscall !== <span class=\"string\">&#x27;listen&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> port === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;Pipe &#x27;</span> + port</span><br><span class=\"line\">      : <span class=\"string\">&#x27;Port &#x27;</span> + port;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// handle specific listen errors with friendly messages</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (error.code) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EACCES&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(bind + <span class=\"string\">&#x27; requires elevated privileges&#x27;</span>);</span><br><span class=\"line\">        process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EADDRINUSE&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(bind + <span class=\"string\">&#x27; is already in use&#x27;</span>);</span><br><span class=\"line\">        process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onListening</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> addr = app.address();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> addr === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;pipe &#x27;</span> + addr</span><br><span class=\"line\">      : <span class=\"string\">&#x27;port &#x27;</span> + addr.port;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Listening on &#x27;</span> + bind);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;error&#x27;</span>, onError);</span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;listening&#x27;</span>, onListening);</span><br><span class=\"line\"><span class=\"comment\">// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发</span></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域：开发环境前端服务通过proxy代理转发请求。</span></span><br><span class=\"line\"><span class=\"comment\">// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。</span></span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;*&#x27;</span>, proxy(&#123; <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://xx.xx.xx.xx:xxxx&#x27;</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onError</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.syscall !== <span class=\"string\">&#x27;listen&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> port === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;Pipe &#x27;</span> + port</span><br><span class=\"line\">      : <span class=\"string\">&#x27;Port &#x27;</span> + port;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// handle specific listen errors with friendly messages</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (error.code) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EACCES&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(bind + <span class=\"string\">&#x27; requires elevated privileges&#x27;</span>);</span><br><span class=\"line\">        process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EADDRINUSE&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(bind + <span class=\"string\">&#x27; is already in use&#x27;</span>);</span><br><span class=\"line\">        process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onListening</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> addr = app.address();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> addr === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;pipe &#x27;</span> + addr</span><br><span class=\"line\">      : <span class=\"string\">&#x27;port &#x27;</span> + addr.port;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Listening on &#x27;</span> + bind);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;error&#x27;</span>, onError);</span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;listening&#x27;</span>, onListening);</span><br><span class=\"line\"><span class=\"comment\">// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发</span></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>"},{"title":"手写一个爬虫","_content":"\n```javascript\nconst express = require('express')\n// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用\nconst superagent = require('superagent')\n// nodejs的抓取页面模块，实现了核心jQuery的子集\nconst cheerio = require('cheerio')\nconst app = express()\n\napp.get('/', (req, res, next) => {\n    superagent.get('https://www.zhipin.com/wuhan/')\n        .end((err, data) => {\n            // 错误优先处理\n            if (err) return next(err)\n            // 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom\n            const $ = cheerio.load(data.text);\n            const conpanys = []\n            $('.conpany-text').each((index, element) => {\n                conpanys.push($(element).find('h4').text())\n            });\n            res.send(conpanys)\n        })\n})\n\napp.listen('9999', () => {\n    console.log('http://localhost:9999');\n})\n```\n\n","source":"_posts/手写一个爬虫.md","raw":"---\ntitle: 手写一个爬虫\n\ntags: [爬虫,手写]\n\ncategories: express\n---\n\n```javascript\nconst express = require('express')\n// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用\nconst superagent = require('superagent')\n// nodejs的抓取页面模块，实现了核心jQuery的子集\nconst cheerio = require('cheerio')\nconst app = express()\n\napp.get('/', (req, res, next) => {\n    superagent.get('https://www.zhipin.com/wuhan/')\n        .end((err, data) => {\n            // 错误优先处理\n            if (err) return next(err)\n            // 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom\n            const $ = cheerio.load(data.text);\n            const conpanys = []\n            $('.conpany-text').each((index, element) => {\n                conpanys.push($(element).find('h4').text())\n            });\n            res.send(conpanys)\n        })\n})\n\napp.listen('9999', () => {\n    console.log('http://localhost:9999');\n})\n```\n\n","slug":"手写一个爬虫","published":1,"date":"2021-08-18T00:03:24.395Z","updated":"2021-08-18T04:45:35.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyu000j8s7ublld06yk","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;superagent&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// nodejs的抓取页面模块，实现了核心jQuery的子集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    superagent.get(<span class=\"string\">&#x27;https://www.zhipin.com/wuhan/&#x27;</span>)</span><br><span class=\"line\">        .end(<span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误优先处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err)</span><br><span class=\"line\">            <span class=\"comment\">// 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> $ = cheerio.load(data.text);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> conpanys = []</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.conpany-text&#x27;</span>).each(<span class=\"function\">(<span class=\"params\">index, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                conpanys.push($(element).find(<span class=\"string\">&#x27;h4&#x27;</span>).text())</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            res.send(conpanys)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"string\">&#x27;9999&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;http://localhost:9999&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;superagent&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// nodejs的抓取页面模块，实现了核心jQuery的子集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    superagent.get(<span class=\"string\">&#x27;https://www.zhipin.com/wuhan/&#x27;</span>)</span><br><span class=\"line\">        .end(<span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误优先处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err)</span><br><span class=\"line\">            <span class=\"comment\">// 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> $ = cheerio.load(data.text);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> conpanys = []</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.conpany-text&#x27;</span>).each(<span class=\"function\">(<span class=\"params\">index, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                conpanys.push($(element).find(<span class=\"string\">&#x27;h4&#x27;</span>).text())</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            res.send(conpanys)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"string\">&#x27;9999&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;http://localhost:9999&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写防抖与节流函数","_content":"\n## 防抖节流应用场景？\n\n按照需求来确定是用防抖还是节流：\n\n> tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。\n\n1. 监听浏览器resize事件；\n2. 文本编辑器实时保存；\n3. 输入框的模糊查询功能；\n...\n\n\n\n## 防抖函数\n\n### 防抖的原理是什么？\n\n防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。\n\n\n\n###  实现一个防抖函数？\n\n```javascript\nconst debounce = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * 除了第一次timers为null,后续函数的调用timer都有值；\n         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；\n         * 注意：clearTimeout(timer)执行之后，timer的值没变。\n         */\n        if (timer) clearTimeout(timer)\n        // 将新的定时器赋值给timer\n        timer = setTimeout(() => {\n            fn.apply(this, args)\n        }, delay)\n    }\n}\n```\n\n\n\n## 节流函数\n\n### 节流的原理是什么？\n\n节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。\n\n\n\n### 实现一个节流函数？\n\n#### 1.使用定时器\n\n```javascript\nconst throttle = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * timer为null的两种情况：\n         * 1.第一次执行函数timer初始值为空；\n         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。\n         */\n        if (!timer) {\n            timer = setTimeout(() => {\n              \t/**\n                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，\n                 * 还是因为clearTimeout(timer)执行之后，timer的值没变\n                 */\n                timer = null\n                fn.apply(this, args)\n            }, delay)\n        }\n    }\n}\n```\n\n#### 2.使用时间戳\n\n```javascript\nfunction throttle_2(fn, delay) {\n    let previous = 0;\n    return function () {\n        // 存储参数\n        let args = arguments\n        const nowTime = Date.now()\n         /**\n         * 执行的两种情况：\n         * 1.第一次执行函数previous为0，nowTime-0>delay；\n         * 2.距离上一次执行时间超过了delay。\n         */\n        if (nowTime - previous > delay) {\n            fn.apply(this, args)\n            previous = nowTime\n        }\n    }\n}\n```\n\n","source":"_posts/手写防抖与节流函数.md","raw":"---\ntitle: 手写防抖与节流函数\n\ntags: [防抖,节流,手写]\n\ncategories: javascript\n---\n\n## 防抖节流应用场景？\n\n按照需求来确定是用防抖还是节流：\n\n> tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。\n\n1. 监听浏览器resize事件；\n2. 文本编辑器实时保存；\n3. 输入框的模糊查询功能；\n...\n\n\n\n## 防抖函数\n\n### 防抖的原理是什么？\n\n防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。\n\n\n\n###  实现一个防抖函数？\n\n```javascript\nconst debounce = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * 除了第一次timers为null,后续函数的调用timer都有值；\n         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；\n         * 注意：clearTimeout(timer)执行之后，timer的值没变。\n         */\n        if (timer) clearTimeout(timer)\n        // 将新的定时器赋值给timer\n        timer = setTimeout(() => {\n            fn.apply(this, args)\n        }, delay)\n    }\n}\n```\n\n\n\n## 节流函数\n\n### 节流的原理是什么？\n\n节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。\n\n\n\n### 实现一个节流函数？\n\n#### 1.使用定时器\n\n```javascript\nconst throttle = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * timer为null的两种情况：\n         * 1.第一次执行函数timer初始值为空；\n         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。\n         */\n        if (!timer) {\n            timer = setTimeout(() => {\n              \t/**\n                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，\n                 * 还是因为clearTimeout(timer)执行之后，timer的值没变\n                 */\n                timer = null\n                fn.apply(this, args)\n            }, delay)\n        }\n    }\n}\n```\n\n#### 2.使用时间戳\n\n```javascript\nfunction throttle_2(fn, delay) {\n    let previous = 0;\n    return function () {\n        // 存储参数\n        let args = arguments\n        const nowTime = Date.now()\n         /**\n         * 执行的两种情况：\n         * 1.第一次执行函数previous为0，nowTime-0>delay；\n         * 2.距离上一次执行时间超过了delay。\n         */\n        if (nowTime - previous > delay) {\n            fn.apply(this, args)\n            previous = nowTime\n        }\n    }\n}\n```\n\n","slug":"手写防抖与节流函数","published":1,"date":"2021-08-18T00:11:36.590Z","updated":"2021-08-18T05:08:44.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyw000o8s7u2eor6x0e","content":"<h2 id=\"防抖节流应用场景？\"><a href=\"#防抖节流应用场景？\" class=\"headerlink\" title=\"防抖节流应用场景？\"></a>防抖节流应用场景？</h2><p>按照需求来确定是用防抖还是节流：</p>\n<blockquote>\n<p>tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。</p>\n</blockquote>\n<ol>\n<li>监听浏览器resize事件；</li>\n<li>文本编辑器实时保存；</li>\n<li>输入框的模糊查询功能；<br>…</li>\n</ol>\n<h2 id=\"防抖函数\"><a href=\"#防抖函数\" class=\"headerlink\" title=\"防抖函数\"></a>防抖函数</h2><h3 id=\"防抖的原理是什么？\"><a href=\"#防抖的原理是什么？\" class=\"headerlink\" title=\"防抖的原理是什么？\"></a>防抖的原理是什么？</h3><p>防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。</p>\n<h3 id=\"实现一个防抖函数？\"><a href=\"#实现一个防抖函数？\" class=\"headerlink\" title=\"实现一个防抖函数？\"></a>实现一个防抖函数？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">fn, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 除了第一次timers为null,后续函数的调用timer都有值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；</span></span><br><span class=\"line\"><span class=\"comment\">         * 注意：clearTimeout(timer)执行之后，timer的值没变。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        <span class=\"comment\">// 将新的定时器赋值给timer</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"节流函数\"><a href=\"#节流函数\" class=\"headerlink\" title=\"节流函数\"></a>节流函数</h2><h3 id=\"节流的原理是什么？\"><a href=\"#节流的原理是什么？\" class=\"headerlink\" title=\"节流的原理是什么？\"></a>节流的原理是什么？</h3><p>节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。</p>\n<h3 id=\"实现一个节流函数？\"><a href=\"#实现一个节流函数？\" class=\"headerlink\" title=\"实现一个节流函数？\"></a>实现一个节流函数？</h3><h4 id=\"1-使用定时器\"><a href=\"#1-使用定时器\" class=\"headerlink\" title=\"1.使用定时器\"></a>1.使用定时器</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">fn, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * timer为null的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数timer初始值为空；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，</span></span><br><span class=\"line\"><span class=\"comment\">                 * 还是因为clearTimeout(timer)执行之后，timer的值没变</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">                fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">            &#125;, delay)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用时间戳\"><a href=\"#2-使用时间戳\" class=\"headerlink\" title=\"2.使用时间戳\"></a>2.使用时间戳</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle_2</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> nowTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数previous为0，nowTime-0&gt;delay；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.距离上一次执行时间超过了delay。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nowTime - previous &gt; delay) &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">            previous = nowTime</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖节流应用场景？\"><a href=\"#防抖节流应用场景？\" class=\"headerlink\" title=\"防抖节流应用场景？\"></a>防抖节流应用场景？</h2><p>按照需求来确定是用防抖还是节流：</p>\n<blockquote>\n<p>tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。</p>\n</blockquote>\n<ol>\n<li>监听浏览器resize事件；</li>\n<li>文本编辑器实时保存；</li>\n<li>输入框的模糊查询功能；<br>…</li>\n</ol>\n<h2 id=\"防抖函数\"><a href=\"#防抖函数\" class=\"headerlink\" title=\"防抖函数\"></a>防抖函数</h2><h3 id=\"防抖的原理是什么？\"><a href=\"#防抖的原理是什么？\" class=\"headerlink\" title=\"防抖的原理是什么？\"></a>防抖的原理是什么？</h3><p>防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。</p>\n<h3 id=\"实现一个防抖函数？\"><a href=\"#实现一个防抖函数？\" class=\"headerlink\" title=\"实现一个防抖函数？\"></a>实现一个防抖函数？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">fn, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 除了第一次timers为null,后续函数的调用timer都有值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；</span></span><br><span class=\"line\"><span class=\"comment\">         * 注意：clearTimeout(timer)执行之后，timer的值没变。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        <span class=\"comment\">// 将新的定时器赋值给timer</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"节流函数\"><a href=\"#节流函数\" class=\"headerlink\" title=\"节流函数\"></a>节流函数</h2><h3 id=\"节流的原理是什么？\"><a href=\"#节流的原理是什么？\" class=\"headerlink\" title=\"节流的原理是什么？\"></a>节流的原理是什么？</h3><p>节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。</p>\n<h3 id=\"实现一个节流函数？\"><a href=\"#实现一个节流函数？\" class=\"headerlink\" title=\"实现一个节流函数？\"></a>实现一个节流函数？</h3><h4 id=\"1-使用定时器\"><a href=\"#1-使用定时器\" class=\"headerlink\" title=\"1.使用定时器\"></a>1.使用定时器</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">fn, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * timer为null的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数timer初始值为空；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，</span></span><br><span class=\"line\"><span class=\"comment\">                 * 还是因为clearTimeout(timer)执行之后，timer的值没变</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">                fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">            &#125;, delay)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用时间戳\"><a href=\"#2-使用时间戳\" class=\"headerlink\" title=\"2.使用时间戳\"></a>2.使用时间戳</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle_2</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> nowTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数previous为0，nowTime-0&gt;delay；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.距离上一次执行时间超过了delay。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nowTime - previous &gt; delay) &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">            previous = nowTime</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"观察者模式和发布订阅模式","_content":"发布订阅模式属于广义上的观察者模式\n发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。\n\n发布订阅模式多了个事件通道\n在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png)\n\n在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png)\n\n","source":"_posts/观察者模式和发布订阅模式.md","raw":"---\ntitle: 观察者模式和发布订阅模式\n\ntags: [观察者模式,发布订阅模式]\n\ncategories: 设计模式\n---\n发布订阅模式属于广义上的观察者模式\n发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。\n\n发布订阅模式多了个事件通道\n在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png)\n\n在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png)\n\n","slug":"观察者模式和发布订阅模式","published":1,"date":"2021-08-18T08:50:45.012Z","updated":"2021-08-18T08:58:12.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckshantyy000r8s7u4s027t24","content":"<p>发布订阅模式属于广义上的观察者模式<br>发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。</p>\n<p>发布订阅模式多了个事件通道<br>在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png\"></p>\n<p>在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>发布订阅模式属于广义上的观察者模式<br>发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。</p>\n<p>发布订阅模式多了个事件通道<br>在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png\"></p>\n<p>在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckshantyk00078s7ughwcfc6w","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantyr000d8s7ue197dm9f"},{"post_id":"ckshantyd00018s7uejem52so","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantyt000h8s7ueb27h2w7"},{"post_id":"ckshantyl00088s7u9ctw8v1q","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantyv000k8s7u9ohrb0vz"},{"post_id":"ckshantyo000b8s7uhh50bjb5","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantyx000p8s7uhe17bgay"},{"post_id":"ckshantyg00038s7u8b1fbp0e","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantyz000s8s7u6iaw8sbo"},{"post_id":"ckshantyj00068s7u54uq0syk","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantz0000v8s7uh8lsb93e"},{"post_id":"ckshantyw000o8s7u2eor6x0e","category_id":"ckshantyh00048s7u907p95lz","_id":"ckshantz0000x8s7u2jhsfnwu"},{"post_id":"ckshantyq000c8s7ud0rmbdt9","category_id":"ckshantyv000l8s7ug2y55zog","_id":"ckshantz1000z8s7u2qwya3yp"},{"post_id":"ckshantys000g8s7uex05euqf","category_id":"ckshantyz000t8s7uatugecey","_id":"ckshantz200138s7u0d0i0u9g"},{"post_id":"ckshantyu000j8s7ublld06yk","category_id":"ckshantyz000t8s7uatugecey","_id":"ckshantz200168s7u1rnnceuo"},{"post_id":"ckshantyy000r8s7u4s027t24","category_id":"ckshantz200128s7u56tm1gmw","_id":"ckshantz300188s7u6u8l2o62"}],"PostTag":[{"post_id":"ckshantyd00018s7uejem52so","tag_id":"ckshantyi00058s7ucjkxh0cp","_id":"ckshantyt000i8s7u1k8y7pv1"},{"post_id":"ckshantyd00018s7uejem52so","tag_id":"ckshantym000a8s7u0s0hc9xe","_id":"ckshantyv000m8s7ugwmofzas"},{"post_id":"ckshantyg00038s7u8b1fbp0e","tag_id":"ckshantys000f8s7u9v12fqw3","_id":"ckshantyy000q8s7u1ghh0h88"},{"post_id":"ckshantyj00068s7u54uq0syk","tag_id":"ckshantyv000n8s7u7qyuhghy","_id":"ckshantz0000w8s7u9wpigsp6"},{"post_id":"ckshantyk00078s7ughwcfc6w","tag_id":"ckshantz0000u8s7ua39md7kx","_id":"ckshantz100118s7u8tz004fu"},{"post_id":"ckshantyl00088s7u9ctw8v1q","tag_id":"ckshantz100108s7u2c43hty2","_id":"ckshantz200158s7uei7z9cl2"},{"post_id":"ckshantyo000b8s7uhh50bjb5","tag_id":"ckshantz200148s7u47du7xqh","_id":"ckshantz3001a8s7u8mxmb0ru"},{"post_id":"ckshantyo000b8s7uhh50bjb5","tag_id":"ckshantz200178s7u7abba0wq","_id":"ckshantz3001b8s7uc9kidpo9"},{"post_id":"ckshantyq000c8s7ud0rmbdt9","tag_id":"ckshantz300198s7u6w472cu4","_id":"ckshantz4001e8s7u9f6w65ls"},{"post_id":"ckshantyq000c8s7ud0rmbdt9","tag_id":"ckshantz200178s7u7abba0wq","_id":"ckshantz4001f8s7u5eyobp7v"},{"post_id":"ckshantys000g8s7uex05euqf","tag_id":"ckshantz4001d8s7u022t60w0","_id":"ckshantz5001j8s7ub5a84aoo"},{"post_id":"ckshantys000g8s7uex05euqf","tag_id":"ckshantz4001g8s7u1ndjgmk6","_id":"ckshantz5001k8s7u9eoqhhe3"},{"post_id":"ckshantys000g8s7uex05euqf","tag_id":"ckshantz200178s7u7abba0wq","_id":"ckshantz6001m8s7ug9l0016x"},{"post_id":"ckshantyu000j8s7ublld06yk","tag_id":"ckshantz5001i8s7uguen4m2k","_id":"ckshantz6001o8s7ucyetf2nv"},{"post_id":"ckshantyu000j8s7ublld06yk","tag_id":"ckshantz200178s7u7abba0wq","_id":"ckshantz6001p8s7u6dv7c1m2"},{"post_id":"ckshantyw000o8s7u2eor6x0e","tag_id":"ckshantz6001n8s7ud356a8vn","_id":"ckshantz7001t8s7u75lgfiy1"},{"post_id":"ckshantyw000o8s7u2eor6x0e","tag_id":"ckshantz6001q8s7ueaanhoiy","_id":"ckshantz7001u8s7ue0jdchiv"},{"post_id":"ckshantyw000o8s7u2eor6x0e","tag_id":"ckshantz200178s7u7abba0wq","_id":"ckshantz8001w8s7u7hxvf0hj"},{"post_id":"ckshantyy000r8s7u4s027t24","tag_id":"ckshantz7001s8s7uc1kcav0v","_id":"ckshantz8001x8s7ufomg4ybq"},{"post_id":"ckshantyy000r8s7u4s027t24","tag_id":"ckshantz8001v8s7u12y7035c","_id":"ckshantz8001y8s7u06pv4h9g"}],"Tag":[{"name":"原型","_id":"ckshantyi00058s7ucjkxh0cp"},{"name":"原型链","_id":"ckshantym000a8s7u0s0hc9xe"},{"name":"闭包","_id":"ckshantys000f8s7u9v12fqw3"},{"name":"AST","_id":"ckshantyv000n8s7u7qyuhghy"},{"name":"垃圾回收机制","_id":"ckshantz0000u8s7ua39md7kx"},{"name":"事件委托","_id":"ckshantz100108s7u2c43hty2"},{"name":"Promise","_id":"ckshantz200148s7u47du7xqh"},{"name":"手写","_id":"ckshantz200178s7u7abba0wq"},{"name":"Loader","_id":"ckshantz300198s7u6w472cu4"},{"name":"Proxy","_id":"ckshantz4001d8s7u022t60w0"},{"name":"跨域","_id":"ckshantz4001g8s7u1ndjgmk6"},{"name":"爬虫","_id":"ckshantz5001i8s7uguen4m2k"},{"name":"防抖","_id":"ckshantz6001n8s7ud356a8vn"},{"name":"节流","_id":"ckshantz6001q8s7ueaanhoiy"},{"name":"观察者模式","_id":"ckshantz7001s8s7uc1kcav0v"},{"name":"发布订阅模式","_id":"ckshantz8001v8s7u12y7035c"}]}}